// Generated by gencpp from file tfg_valderico/pointVector.msg
// DO NOT EDIT!


#ifndef TFG_VALDERICO_MESSAGE_POINTVECTOR_H
#define TFG_VALDERICO_MESSAGE_POINTVECTOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <tfg_valderico/pointCoordinates.h>

namespace tfg_valderico
{
template <class ContainerAllocator>
struct pointVector_
{
  typedef pointVector_<ContainerAllocator> Type;

  pointVector_()
    : point_vector()  {
    }
  pointVector_(const ContainerAllocator& _alloc)
    : point_vector(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::tfg_valderico::pointCoordinates_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::tfg_valderico::pointCoordinates_<ContainerAllocator> >::other >  _point_vector_type;
  _point_vector_type point_vector;





  typedef boost::shared_ptr< ::tfg_valderico::pointVector_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tfg_valderico::pointVector_<ContainerAllocator> const> ConstPtr;

}; // struct pointVector_

typedef ::tfg_valderico::pointVector_<std::allocator<void> > pointVector;

typedef boost::shared_ptr< ::tfg_valderico::pointVector > pointVectorPtr;
typedef boost::shared_ptr< ::tfg_valderico::pointVector const> pointVectorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tfg_valderico::pointVector_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tfg_valderico::pointVector_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tfg_valderico::pointVector_<ContainerAllocator1> & lhs, const ::tfg_valderico::pointVector_<ContainerAllocator2> & rhs)
{
  return lhs.point_vector == rhs.point_vector;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tfg_valderico::pointVector_<ContainerAllocator1> & lhs, const ::tfg_valderico::pointVector_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tfg_valderico

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tfg_valderico::pointVector_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tfg_valderico::pointVector_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tfg_valderico::pointVector_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tfg_valderico::pointVector_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tfg_valderico::pointVector_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tfg_valderico::pointVector_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tfg_valderico::pointVector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8339657f514b1575d4ed6e0e08cc15ad";
  }

  static const char* value(const ::tfg_valderico::pointVector_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8339657f514b1575ULL;
  static const uint64_t static_value2 = 0xd4ed6e0e08cc15adULL;
};

template<class ContainerAllocator>
struct DataType< ::tfg_valderico::pointVector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tfg_valderico/pointVector";
  }

  static const char* value(const ::tfg_valderico::pointVector_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tfg_valderico::pointVector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pointCoordinates[] point_vector\n"
"\n"
"================================================================================\n"
"MSG: tfg_valderico/pointCoordinates\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::tfg_valderico::pointVector_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tfg_valderico::pointVector_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.point_vector);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pointVector_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tfg_valderico::pointVector_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tfg_valderico::pointVector_<ContainerAllocator>& v)
  {
    s << indent << "point_vector[]" << std::endl;
    for (size_t i = 0; i < v.point_vector.size(); ++i)
    {
      s << indent << "  point_vector[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::tfg_valderico::pointCoordinates_<ContainerAllocator> >::stream(s, indent + "    ", v.point_vector[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TFG_VALDERICO_MESSAGE_POINTVECTOR_H

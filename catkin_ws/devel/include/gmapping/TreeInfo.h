// Generated by gencpp from file gmapping/treeInfo.msg
// DO NOT EDIT!


#ifndef GMAPPING_MESSAGE_TREEINFO_H
#define GMAPPING_MESSAGE_TREEINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gmapping
{
template <class ContainerAllocator>
struct treeInfo_
{
  typedef treeInfo_<ContainerAllocator> Type;

  treeInfo_()
    : treeVariables()  {
    }
  treeInfo_(const ContainerAllocator& _alloc)
    : treeVariables(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _treeVariables_type;
  _treeVariables_type treeVariables;





  typedef boost::shared_ptr< ::gmapping::treeInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gmapping::treeInfo_<ContainerAllocator> const> ConstPtr;

}; // struct treeInfo_

typedef ::gmapping::treeInfo_<std::allocator<void> > treeInfo;

typedef boost::shared_ptr< ::gmapping::treeInfo > treeInfoPtr;
typedef boost::shared_ptr< ::gmapping::treeInfo const> treeInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gmapping::treeInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gmapping::treeInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gmapping::treeInfo_<ContainerAllocator1> & lhs, const ::gmapping::treeInfo_<ContainerAllocator2> & rhs)
{
  return lhs.treeVariables == rhs.treeVariables;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gmapping::treeInfo_<ContainerAllocator1> & lhs, const ::gmapping::treeInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gmapping

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::gmapping::treeInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gmapping::treeInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gmapping::treeInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gmapping::treeInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gmapping::treeInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gmapping::treeInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gmapping::treeInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "381c8aedf942d9074ebb838ccb473b35";
  }

  static const char* value(const ::gmapping::treeInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x381c8aedf942d907ULL;
  static const uint64_t static_value2 = 0x4ebb838ccb473b35ULL;
};

template<class ContainerAllocator>
struct DataType< ::gmapping::treeInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gmapping/treeInfo";
  }

  static const char* value(const ::gmapping::treeInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gmapping::treeInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] treeVariables\n"
;
  }

  static const char* value(const ::gmapping::treeInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gmapping::treeInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.treeVariables);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct treeInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gmapping::treeInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gmapping::treeInfo_<ContainerAllocator>& v)
  {
    s << indent << "treeVariables[]" << std::endl;
    for (size_t i = 0; i < v.treeVariables.size(); ++i)
    {
      s << indent << "  treeVariables[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.treeVariables[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GMAPPING_MESSAGE_TREEINFO_H
